<% layout('layout') -%>

<div class="orders-container">
    <div class="container-fluid">
        <!-- Orders Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="orders-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h1 class="display-6 fw-bold mb-2">Order Management</h1>
                            <p class="text-muted">Manage your customer orders and track progress</p>
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-primary" id="refreshOrders">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-download"></i> Export
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="exportOrders('csv')">Export as CSV</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="exportOrders('pdf')">Export as PDF</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Stats Cards -->
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stats-card pending">
                    <div class="stats-content">
                        <div class="stats-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="stats-info">
                            <h3 id="pendingCount">0</h3>
                            <p>Pending Orders</p>
                            <small class="text-warning">‚ö†Ô∏è Respond within 24h</small>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stats-card in-progress">
                    <div class="stats-content">
                        <div class="stats-icon">
                            <i class="fas fa-play-circle"></i>
                        </div>
                        <div class="stats-info">
                            <h3 id="inProgressCount">0</h3>
                            <p>In Progress</p>
                            <small class="text-info">üîÑ Active projects</small>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stats-card delivered">
                    <div class="stats-content">
                        <div class="stats-icon">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div class="stats-info">
                            <h3 id="deliveredCount">0</h3>
                            <p>Delivered</p>
                            <small class="text-success">‚úÖ Awaiting approval</small>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="stats-card completed">
                    <div class="stats-content">
                        <div class="stats-icon">
                            <i class="fas fa-trophy"></i>
                        </div>
                        <div class="stats-info">
                            <h3 id="completedCount">0</h3>
                            <p>Completed</p>
                            <small class="text-success">üí∞ This month</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="row mb-4">
            <div class="col-lg-8 col-md-6 mb-3">
                <div class="search-filters">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" id="searchOrders" placeholder="Search orders by ID, customer name, or service...">
                        <button class="btn btn-outline-secondary" type="button" id="clearSearch">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="filter-controls">
                    <select class="form-select" id="statusFilter">
                        <option value="all">All Orders</option>
                        <option value="pending">‚è≥ Pending</option>
                        <option value="accepted">‚úÖ Accepted</option>
                        <option value="in_progress">üîÑ In Progress</option>
                        <option value="delivered">üì¶ Delivered</option>
                        <option value="completed">‚úÖ Completed</option>
                        <option value="cancelled">‚ùå Cancelled</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- New Service Requests (Step 6) -->
        <div class="row mb-4" id="newRequestsSection">
            <div class="col-12">
                <div class="card border-warning">
                    <div class="card-header bg-warning bg-opacity-10 border-warning">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-bell text-warning"></i>
                            New Service Requests
                            <span class="badge bg-warning ms-2" id="newRequestsBadge">0</span>
                        </h5>
                    </div>
                    <div class="card-body" id="newRequestsContainer">
                        <!-- New requests will be loaded here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Orders Table -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-list"></i>
                                All Orders
                            </h5>
                            <div class="d-flex gap-2">
                                <div class="btn-group btn-group-sm" role="group">
                                    <input type="radio" class="btn-check" name="viewMode" id="tableView" value="table" checked>
                                    <label class="btn btn-outline-primary" for="tableView">
                                        <i class="fas fa-table"></i> Table
                                    </label>
                                    
                                    <input type="radio" class="btn-check" name="viewMode" id="cardView" value="card">
                                    <label class="btn btn-outline-primary" for="cardView">
                                        <i class="fas fa-th-large"></i> Cards
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <!-- Table View -->
                        <div id="tableViewContainer">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0" id="ordersTable">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Order</th>
                                            <th>Customer</th>
                                            <th>Service</th>
                                            <th>Amount</th>
                                            <th>Status</th>
                                            <th>Deadline</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="ordersTableBody">
                                        <!-- Orders will be loaded here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Card View -->
                        <div id="cardViewContainer" class="d-none">
                            <div class="row p-3" id="ordersCardsContainer">
                                <!-- Order cards will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        <div class="row mt-4">
            <div class="col-12">
                <nav aria-label="Orders pagination">
                    <ul class="pagination justify-content-center" id="ordersPagination">
                        <!-- Pagination will be generated here -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Order Action Modals -->

<!-- Accept Order Modal (Step 7) -->
<div class="modal fade" id="acceptOrderModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-success bg-opacity-10">
                <h5 class="modal-title">
                    <i class="fas fa-check-circle text-success"></i>
                    Accept Order
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="acceptOrderForm">
                    <input type="hidden" id="acceptOrderId">
                    
                    <div class="order-summary mb-4 p-3 bg-light rounded">
                        <h6>Order Summary</h6>
                        <div id="acceptOrderSummary">
                            <!-- Order details will be populated here -->
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="acceptMessage" class="form-label">Message to Customer *</label>
                        <textarea class="form-control" id="acceptMessage" rows="4" required
                            placeholder="Thank you for choosing my services! I'm excited to work on your project..."></textarea>
                        <div class="form-text">Be professional and set clear expectations</div>
                    </div>

                    <div class="mb-3">
                        <label for="estimatedDelivery" class="form-label">Estimated Delivery Date *</label>
                        <input type="datetime-local" class="form-control" id="estimatedDelivery" required>
                        <div class="form-text">When do you expect to complete this project?</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Additional Requirements (Optional)</label>
                        <div id="customRequirements">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" placeholder="Add custom requirement">
                                <button class="btn btn-outline-secondary" type="button" onclick="addRequirement()">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        <strong>Note:</strong> Once you accept this order, the customer will be charged and the project will begin.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmAcceptOrder">
                    <i class="fas fa-handshake"></i> Accept Order
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Decline Order Modal (Step 7) -->
<div class="modal fade" id="declineOrderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger bg-opacity-10">
                <h5 class="modal-title">
                    <i class="fas fa-times-circle text-danger"></i>
                    Decline Order
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="declineOrderForm">
                    <input type="hidden" id="declineOrderId">
                    
                    <div class="mb-3">
                        <label for="declineReason" class="form-label">Reason for Declining *</label>
                        <select class="form-select" id="declineReasonSelect" onchange="handleDeclineReasonChange()">
                            <option value="">Select a reason</option>
                            <option value="outside_expertise">Outside my area of expertise</option>
                            <option value="timeline_too_short">Timeline is too short</option>
                            <option value="budget_too_low">Budget is too low</option>
                            <option value="fully_booked">Currently fully booked</option>
                            <option value="unclear_requirements">Requirements are unclear</option>
                            <option value="other">Other</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="declineMessage" class="form-label">Message to Customer *</label>
                        <textarea class="form-control" id="declineMessage" rows="4" required
                            placeholder="I apologize, but I won't be able to take on this project because..."></textarea>
                        <div class="form-text">Be polite and professional. Consider suggesting alternatives if possible.</div>
                    </div>

                    <div class="mb-3" id="referralSection" style="display: none;">
                        <label for="referralMessage" class="form-label">Suggest Alternative Providers (Optional)</label>
                        <textarea class="form-control" id="referralMessage" rows="2"
                            placeholder="I recommend checking out [provider name] who specializes in this type of work..."></textarea>
                    </div>

                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Warning:</strong> Declining too many orders may affect your profile visibility.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeclineOrder">
                    <i class="fas fa-times"></i> Decline Order
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Deliver Work Modal (Step 8) -->
<div class="modal fade" id="deliverWorkModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary bg-opacity-10">
                <h5 class="modal-title">
                    <i class="fas fa-upload text-primary"></i>
                    Deliver Completed Work
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="deliverWorkForm" enctype="multipart/form-data">
                    <input type="hidden" id="deliverOrderId">
                    
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="deliveryMessage" class="form-label">Delivery Message *</label>
                                <textarea class="form-control" id="deliveryMessage" rows="5" required
                                    placeholder="I'm pleased to deliver your completed project. Here's what I've accomplished..."></textarea>
                                <div class="form-text">Explain what you've delivered and any important notes</div>
                            </div>

                            <div class="mb-3">
                                <label for="deliverables" class="form-label">Upload Deliverables *</label>
                                <input type="file" class="form-control" id="deliverables" multiple accept=".jpg,.jpeg,.png,.pdf,.doc,.docx,.zip,.rar">
                                <div class="form-text">
                                    Supported formats: Images, PDFs, Documents, Archives (Max 50MB per file)
                                </div>
                                <div id="filePreview" class="mt-2">
                                    <!-- File previews will appear here -->
                                </div>
                            </div>

                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="requestFeedback">
                                    <label class="form-check-label" for="requestFeedback">
                                        Request customer feedback after approval
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="delivery-guidelines">
                                <h6><i class="fas fa-lightbulb text-warning"></i> Delivery Guidelines</h6>
                                <ul class="small text-muted">
                                    <li>Include all promised deliverables</li>
                                    <li>Provide clear instructions if needed</li>
                                    <li>Double-check file quality and format</li>
                                    <li>Be professional in your message</li>
                                    <li>Include revision policy if applicable</li>
                                </ul>
                                
                                <div class="mt-3 p-2 bg-success bg-opacity-10 rounded">
                                    <small class="text-success">
                                        <i class="fas fa-check-circle"></i>
                                        Customer will have 3 days to review and approve
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmDeliverWork">
                    <i class="fas fa-paper-plane"></i> Deliver Work
                </button>
            </div>
        </div>
    </div>
</div>

<style>
.orders-container {
    padding: 2rem 0;
    background: #f8f9fa;
    min-height: 100vh;
}

.orders-header {
    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    color: white;
    padding: 2rem;
    border-radius: 15px;
    margin-bottom: 2rem;
}

.stats-card {
    background: white;
    border-radius: 15px;
    padding: 1.5rem;
    box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    transition: transform 0.3s ease;
    border-left: 4px solid;
    height: 100%;
}

.stats-card:hover {
    transform: translateY(-2px);
}

.stats-card.pending {
    border-left-color: #ffc107;
}

.stats-card.in-progress {
    border-left-color: #17a2b8;
}

.stats-card.delivered {
    border-left-color: #28a745;
}

.stats-card.completed {
    border-left-color: #6f42c1;
}

.stats-content {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.stats-icon {
    font-size: 2rem;
    color: #007bff;
    flex-shrink: 0;
}

.stats-info h3 {
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 0.25rem;
}

.stats-info p {
    margin-bottom: 0.25rem;
    color: #6c757d;
}

.new-request-card {
    border: 2px solid #ffc107;
    border-radius: 10px;
    padding: 1rem;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #fff3cd, #ffeaa7);
    position: relative;
}

.new-request-card::before {
    content: "NEW";
    position: absolute;
    top: -8px;
    right: 10px;
    background: #dc3545;
    color: white;
    padding: 0.2rem 0.5rem;
    border-radius: 10px;
    font-size: 0.7rem;
    font-weight: bold;
}

.order-card {
    background: white;
    border-radius: 10px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    border-left: 4px solid;
    transition: transform 0.2s ease;
}

.order-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}

.order-card.status-pending {
    border-left-color: #ffc107;
}

.order-card.status-accepted {
    border-left-color: #17a2b8;
}

.order-card.status-in_progress {
    border-left-color: #007bff;
}

.order-card.status-delivered {
    border-left-color: #28a745;
}

.order-card.status-completed {
    border-left-color: #6f42c1;
}

.status-badge {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 15px;
    font-weight: 600;
}

.deadline-urgent {
    color: #dc3545;
    font-weight: bold;
}

.deadline-warning {
    color: #fd7e14;
    font-weight: bold;
}

.deadline-normal {
    color: #28a745;
}

.customer-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.customer-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
}

.order-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.priority-badge {
    position: absolute;
    top: 10px;
    right: 10px;
    background: #dc3545;
    color: white;
    padding: 0.2rem 0.5rem;
    border-radius: 10px;
    font-size: 0.7rem;
    font-weight: bold;
}

.file-preview-item {
    display: inline-block;
    margin: 0.25rem;
    padding: 0.5rem;
    background: #f8f9fa;
    border-radius: 5px;
    position: relative;
}

.file-preview-item .remove-file {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 0.7rem;
    cursor: pointer;
}

.delivery-guidelines {
    background: #f8f9fa;
    border-radius: 10px;
    padding: 1rem;
}

.timeline-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 0.5rem;
}

.timeline-indicator.overdue {
    background: #dc3545;
    animation: pulse 2s infinite;
}

.timeline-indicator.warning {
    background: #ffc107;
}

.timeline-indicator.normal {
    background: #28a745;
}

@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.5; }
    100% { opacity: 1; }
}

.quick-stats {
    display: flex;
    justify-content: space-around;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 10px;
    margin-bottom: 1rem;
}

.quick-stat {
    text-align: center;
}

.quick-stat .number {
    font-size: 1.5rem;
    font-weight: bold;
    color: #007bff;
}

.quick-stat .label {
    font-size: 0.8rem;
    color: #6c757d;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentPage = 1;
    let currentStatus = 'all';
    let currentSearch = '';
    let ordersData = [];

    // Initialize page
    loadOrders();
    loadOrderStats();
    setupEventListeners();
    setupRealTimeUpdates();

    function setupEventListeners() {
        // Search functionality
        document.getElementById('searchOrders').addEventListener('input', debounce(function(e) {
            currentSearch = e.target.value;
            currentPage = 1;
            loadOrders();
        }, 300));

        // Clear search
        document.getElementById('clearSearch').addEventListener('click', function() {
            document.getElementById('searchOrders').value = '';
            currentSearch = '';
            currentPage = 1;
            loadOrders();
        });

        // Status filter
        document.getElementById('statusFilter').addEventListener('change', function(e) {
            currentStatus = e.target.value;
            currentPage = 1;
            loadOrders();
        });

        // View mode toggle
        document.querySelectorAll('input[name="viewMode"]').forEach(radio => {
            radio.addEventListener('change', function() {
                toggleViewMode(this.value);
            });
        });

        // Refresh button
        document.getElementById('refreshOrders').addEventListener('click', function() {
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Refreshing...';
            loadOrders().finally(() => {
                this.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh';
            });
        });

        // Accept order form
        document.getElementById('confirmAcceptOrder').addEventListener('click', handleAcceptOrder);
        
        // Decline order form
        document.getElementById('confirmDeclineOrder').addEventListener('click', handleDeclineOrder);
        
        // Deliver work form  
        document.getElementById('confirmDeliverWork').addEventListener('click', handleDeliverWork);

        // File upload preview
        document.getElementById('deliverables').addEventListener('change', handleFilePreview);
    }

    async function loadOrders() {
        try {
            showLoadingSpinner();
            
            const params = new URLSearchParams({
                page: currentPage,
                limit: 10,
                status: currentStatus,
                search: currentSearch
            });

            const response = await fetch(`/api/orders?${params}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            const result = await response.json();
            
            if (result.success) {
                ordersData = result.orders;
                renderOrders(result.orders);
                renderPagination(result.pagination);
                
                // Load new requests separately
                loadNewRequests();
            }

        } catch (error) {
            console.error('Error loading orders:', error);
            showNotification('Error', 'Failed to load orders', 'error');
        } finally {
            hideLoadingSpinner();
        }
    }

    async function loadNewRequests() {
        try {
            const response = await fetch('/api/orders/new-requests', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            const result = await response.json();
            
            if (result.success) {
                renderNewRequests(result.orders);
                document.getElementById('newRequestsBadge').textContent = result.orders.length;
                
                // Update pending count
                document.getElementById('pendingCount').textContent = result.orders.length;
            }

        } catch (error) {
            console.error('Error loading new requests:', error);
        }
    }

    async function loadOrderStats() {
        try {
            const response = await fetch('/api/orders/stats', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            const result = await response.json();
            
            if (result.success) {
                updateStatsCards(result.stats);
            }

        } catch (error) {
            console.error('Error loading order stats:', error);
        }
    }

    function renderNewRequests(requests) {
        const container = document.getElementById('newRequestsContainer');
        
        if (requests.length === 0) {
            container.innerHTML = `
                <div class="text-center text-muted py-4">
                    <i class="fas fa-inbox fa-3x mb-3"></i>
                    <h6>No New Requests</h6>
                    <p>New service requests will appear here</p>
                </div>
            `;
            document.getElementById('newRequestsSection').style.display = 'none';
            return;
        }

        document.getElementById('newRequestsSection').style.display = 'block';

        container.innerHTML = requests.map(order => `
            <div class="new-request-card">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-2">
                            <img src="${order.customer.profileImage || '/images/default-avatar.png'}" 
                                 alt="${order.customer.name}" class="customer-avatar me-2">
                            <div>
                                <h6 class="mb-0">${order.customer.name}</h6>
                                <small class="text-muted">${order.customer.location || 'Location not specified'}</small>
                            </div>
                        </div>
                        <h6 class="text-primary">${order.service.title}</h6>
                        <p class="mb-1">${order.packageType.toUpperCase()} Package</p>
                    </div>
                    <div class="col-md-3">
                        <div class="text-center">
                            <div class="h5 mb-0 text-success">‚Çπ${order.amount.toLocaleString()}</div>
                            <small class="text-muted">Project Value</small>
                            <div class="mt-1">
                                <span class="timeline-indicator ${getTimelineStatus(order.timeRemaining)}"></span>
                                <small class="${getTimelineClass(order.timeRemaining)}">${order.timeRemaining}</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="d-grid gap-1">
                            <button class="btn btn-success btn-sm" onclick="showAcceptModal('${order.id}')">
                                <i class="fas fa-check"></i> Accept
                            </button>
                            <button class="btn btn-outline-danger btn-sm" onclick="showDeclineModal('${order.id}')">
                                <i class="fas fa-times"></i> Decline
                            </button>
                            <button class="btn btn-outline-info btn-sm" onclick="viewOrderDetails('${order.id}')">
                                <i class="fas fa-eye"></i> View Details
                            </button>
                        </div>
                    </div>
                </div>
                ${order.requirements && order.requirements.length > 0 ? `
                    <div class="mt-2 pt-2 border-top">
                        <small class="text-muted">Requirements: ${order.requirements.length} items specified</small>
                    </div>
                ` : ''}
            </div>
        `).join('');
    }

    function renderOrders(orders) {
        const tableView = document.getElementById('tableView').checked;
        
        if (tableView) {
            renderTableView(orders);
        } else {
            renderCardView(orders);
        }
    }

    function renderTableView(orders) {
        const tbody = document.getElementById('ordersTableBody');
        
        if (orders.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center text-muted py-5">
                        <i class="fas fa-inbox fa-3x mb-3"></i><br>
                        No orders found
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = orders.map(order => `
            <tr>
                <td>
                    <div>
                        <small class="text-muted">#${order.id.slice(-6)}</small>
                        <div class="small text-muted">${formatDate(order.createdAt)}</div>
                    </div>
                </td>
                <td>
                    <div class="customer-info">
                        <img src="${order.customer.profileImage || '/images/default-avatar.png'}" 
                             alt="${order.customer.name}" class="customer-avatar">
                        <div>
                            <div class="fw-bold">${order.customer.name}</div>
                            <small class="text-muted">${order.customer.email}</small>
                        </div>
                    </div>
                </td>
                <td>
                    <div class="fw-bold">${order.service.title}</div>
                    <small class="text-muted">${order.service.category}</small>
                </td>
                <td>
                    <span class="fw-bold">‚Çπ${order.amount.toLocaleString()}</span>
                </td>
                <td>
                    <span class="badge ${getStatusBadgeClass(order.status)}">${formatStatus(order.status)}</span>
                </td>
                <td>
                    ${order.deadline ? `
                        <span class="${getDeadlineClass(order.deadline)}">
                            ${formatDeadline(order.deadline)}
                        </span>
                    ` : '<span class="text-muted">Not set</span>'}
                </td>
                <td>
                    <div class="order-actions">
                        ${getOrderActions(order)}
                    </div>
                </td>
            </tr>
        `).join('');
    }

    function renderCardView(orders) {
        const container = document.getElementById('ordersCardsContainer');
        
        if (orders.length === 0) {
            container.innerHTML = `
                <div class="col-12 text-center text-muted py-5">
                    <i class="fas fa-inbox fa-3x mb-3"></i><br>
                    No orders found
                </div>
            `;
            return;
        }

        container.innerHTML = orders.map(order => `
            <div class="col-lg-6 col-xl-4 mb-3">
                <div class="order-card status-${order.status}">
                    ${order.priority === 'urgent' ? '<div class="priority-badge">URGENT</div>' : ''}
                    
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div>
                            <h6 class="mb-1">${order.service.title}</h6>
                            <small class="text-muted">#${order.id.slice(-6)}</small>
                        </div>
                        <span class="badge ${getStatusBadgeClass(order.status)}">${formatStatus(order.status)}</span>
                    </div>

                    <div class="customer-info mb-2">
                        <img src="${order.customer.profileImage || '/images/default-avatar.png'}" 
                             alt="${order.customer.name}" class="customer-avatar">
                        <div>
                            <div class="fw-bold">${order.customer.name}</div>
                            <small class="text-muted">${order.customer.email}</small>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="h5 mb-0 text-success">‚Çπ${order.amount.toLocaleString()}</div>
                        ${order.deadline ? `
                            <small class="${getDeadlineClass(order.deadline)}">
                                ${formatDeadline(order.deadline)}
                            </small>
                        ` : ''}
                    </div>

                    <div class="order-actions">
                        ${getOrderActions(order)}
                    </div>
                </div>
            </div>
        `).join('');
    }

    function getOrderActions(order) {
        switch (order.status) {
            case 'pending':
                return `
                    <button class="btn btn-success btn-sm" onclick="showAcceptModal('${order.id}')">
                        <i class="fas fa-check"></i> Accept
                    </button>
                    <button class="btn btn-outline-danger btn-sm" onclick="showDeclineModal('${order.id}')">
                        <i class="fas fa-times"></i> Decline
                    </button>
                `;
            case 'accepted':
            case 'in_progress':
                return `
                    <button class="btn btn-primary btn-sm" onclick="showDeliverModal('${order.id}')">
                        <i class="fas fa-upload"></i> Deliver
                    </button>
                    <button class="btn btn-outline-info btn-sm" onclick="openChat('${order.id}')">
                        <i class="fas fa-comments"></i> Chat
                    </button>
                `;
            case 'delivered':
                return `
                    <button class="btn btn-outline-success btn-sm" disabled>
                        <i class="fas fa-clock"></i> Awaiting Review
                    </button>
                `;
            case 'completed':
                return `
                    <button class="btn btn-outline-success btn-sm" disabled>
                        <i class="fas fa-check-circle"></i> Completed
                    </button>
                `;
            default:
                return `
                    <button class="btn btn-outline-info btn-sm" onclick="viewOrderDetails('${order.id}')">
                        <i class="fas fa-eye"></i> View
                    </button>
                `;
        }
    }

    // Modal functions
    async function showAcceptModal(orderId) {
        const modal = new bootstrap.Modal(document.getElementById('acceptOrderModal'));
        document.getElementById('acceptOrderId').value = orderId;
        
        // Load order details
        try {
            const response = await fetch(`/api/orders/${orderId}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                const order = result.order;
                document.getElementById('acceptOrderSummary').innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Service:</strong> ${order.service.title}<br>
                            <strong>Package:</strong> ${order.packageType.toUpperCase()}<br>
                            <strong>Customer:</strong> ${order.customer.name}
                        </div>
                        <div class="col-md-6">
                            <strong>Amount:</strong> ‚Çπ${order.amount.toLocaleString()}<br>
                            <strong>Requirements:</strong> ${order.requirements.length} items<br>
                            <strong>Order Date:</strong> ${formatDate(order.createdAt)}
                        </div>
                    </div>
                `;
                
                // Set minimum delivery date (today + service delivery time)
                const minDate = new Date();
                minDate.setDate(minDate.getDate() + 1);
                document.getElementById('estimatedDelivery').min = minDate.toISOString().slice(0, 16);
            }
        } catch (error) {
            console.error('Error loading order details:', error);
        }
        
        modal.show();
    }

    async function handleAcceptOrder() {
        const orderId = document.getElementById('acceptOrderId').value;
        const message = document.getElementById('acceptMessage').value;
        const estimatedDelivery = document.getElementById('estimatedDelivery').value;
        
        if (!message || !estimatedDelivery) {
            showNotification('Error', 'Please fill in all required fields', 'error');
            return;
        }

        const btn = document.getElementById('confirmAcceptOrder');
        btn.disabled = true;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Accepting...';

        try {
            const response = await fetch(`/api/orders/${orderId}/accept`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({
                    message,
                    estimatedDelivery,
                    customRequirements: getCustomRequirements()
                })
            });

            const result = await response.json();
            
            if (result.success) {
                showNotification('Success', 'Order accepted successfully!', 'success');
                
                // Close modal and refresh orders
                bootstrap.Modal.getInstance(document.getElementById('acceptOrderModal')).hide();
                document.getElementById('acceptOrderForm').reset();
                loadOrders();
                loadOrderStats();
                
            } else {
                throw new Error(result.message || 'Failed to accept order');
            }

        } catch (error) {
            console.error('Error accepting order:', error);
            showNotification('Error', error.message, 'error');
        } finally {
            btn.disabled = false;
            btn.innerHTML = '<i class="fas fa-handshake"></i> Accept Order';
        }
    }

    // Helper functions
    function getStatusBadgeClass(status) {
        const statusClasses = {
            'pending': 'bg-warning text-dark',
            'accepted': 'bg-info',
            'in_progress': 'bg-primary',
            'delivered': 'bg-success',
            'completed': 'bg-success',
            'cancelled': 'bg-danger',
            'declined': 'bg-secondary'
        };
        return statusClasses[status] || 'bg-secondary';
    }

    function formatStatus(status) {
        const statusLabels = {
            'pending': 'Pending',
            'accepted': 'Accepted',
            'in_progress': 'In Progress',
            'delivered': 'Delivered',
            'completed': 'Completed',
            'cancelled': 'Cancelled',
            'declined': 'Declined'
        };
        return statusLabels[status] || status;
    }

    function formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('en-IN', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
    }

    function formatDeadline(deadline) {
        const date = new Date(deadline);
        const now = new Date();
        const diffTime = date - now;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays < 0) {
            return `Overdue by ${Math.abs(diffDays)} days`;
        } else if (diffDays === 0) {
            return 'Due today';
        } else if (diffDays === 1) {
            return 'Due tomorrow';
        } else {
            return `${diffDays} days left`;
        }
    }

    function getDeadlineClass(deadline) {
        const date = new Date(deadline);
        const now = new Date();
        const diffTime = date - now;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        
        if (diffDays < 0) {
            return 'deadline-urgent';
        } else if (diffDays <= 2) {
            return 'deadline-warning';
        } else {
            return 'deadline-normal';
        }
    }

    function getTimelineStatus(timeRemaining) {
        if (timeRemaining.includes('Expired') || timeRemaining.includes('Overdue')) {
            return 'overdue';
        } else if (timeRemaining.includes('h') && parseInt(timeRemaining) < 6) {
            return 'warning';
        } else {
            return 'normal';
        }
    }

    function getTimelineClass(timeRemaining) {
        if (timeRemaining.includes('Expired') || timeRemaining.includes('Overdue')) {
            return 'text-danger fw-bold';
        } else if (timeRemaining.includes('h') && parseInt(timeRemaining) < 6) {
            return 'text-warning fw-bold';
        } else {
            return 'text-success';
        }
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    function toggleViewMode(mode) {
        const tableContainer = document.getElementById('tableViewContainer');
        const cardContainer = document.getElementById('cardViewContainer');
        
        if (mode === 'table') {
            tableContainer.classList.remove('d-none');
            cardContainer.classList.add('d-none');
        } else {
            tableContainer.classList.add('d-none');
            cardContainer.classList.remove('d-none');
        }
    }

    function setupRealTimeUpdates() {
        socket.on('new-order', (data) => {
            loadNewRequests();
            loadOrderStats();
            showNotification('New Order!', `You have a new order for ${data.serviceTitle}`, 'info');
        });

        socket.on('order-update', (data) => {
            loadOrders();
            loadOrderStats();
        });
    }

    // Export functions
    window.exportOrders = function(format) {
        const params = new URLSearchParams({
            format,
            status: currentStatus,
            search: currentSearch
        });
        
        window.open(`/api/orders/export?${params}`, '_blank');
    };

    // Global functions for inline onclick handlers
    window.showAcceptModal = showAcceptModal;
    window.showDeclineModal = function(orderId) {
        // Similar implementation for decline modal
        console.log('Decline order:', orderId);
    };
    
    window.showDeliverModal = function(orderId) {
        // Similar implementation for deliver modal
        console.log('Deliver order:', orderId);
    };
    
    window.viewOrderDetails = function(orderId) {
        window.location.href = `/provider/orders/${orderId}`;
    };
    
    window.openChat = function(orderId) {
        window.location.href = `/provider/chat?order=${orderId}`;
    };
});
</script>
